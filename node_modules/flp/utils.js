buf = Buffer.from([0x46, 0x4c, 0x68, 0x64, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x60, 0x00, 0x46, 0x4c,
                   0x64, 0x74, 0x56, 0x14, 0x12, 0x00, 0xc7, 0x0c, 0x32, 0x30, 0x2e, 0x35, 0x2e, 0x30, 0x2e, 0x31,
                   0x31, 0x34, 0x32, 0x00, 0x9f, 0x76, 0x04, 0x00, 0x00, 0x1c, 0x01, 0x25,0x01, 0xc8, 0x02, 0x00,
                   0x00, 0x9c, 0x60, 0xe4, 0x01, 0x00, 0x43, 0x6e, 0x00, 0x09, 0x01, 0x0b, 0x00, 0x50, 0x00, 0x00,
                   0x11, 0x04, 0x12, 0x04, 0x23, 0x01, 0x17, 0x00, 0x1e, 0x01, 0x0a, 0x01, 0xc2, 0x22, 0x53, 0x00
                  ]);


buf2 = Buffer.from([0x46, 0x4c, 0x68, 0x64, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x60, 0x00, 0x46, 0x4c,
                    0x64, 0x74, 0x56, 0x14, 0x12, 0x00, 0xc7,  0x07, 0x31 ,0x31, 0x2e, 0x30, 0x2e ,0x30 ,0x00, 0x1c,
                    0x03, 0xc8, 0x11, 0x63, 0x31, 0x35, 0x35, 0x32, 0x39, 0x20, 0x5b, 0x36, 0x39, 0x78, 0x78, 0x30,
                    0x76, 0x3a, 0x6c, 0x00, 0x9c, 0x60, 0xe4, 0x01, 0x00, 0x43, 0x6e, 0x00, 0x09, 0x00, 0x0b, 0x00,
                    0x50, 0x00, 0x00, 0x11, 0x04, 0x12, 0x04, 0x17, 0x00, 0x1e, 0x01, 0x0a, 0x01, 0xc2, 0x11, 0x53
                  ]);



var localLen;
var CUR=0;

var FLP_Word = 64;
var FLP_Text = 192;
var FLP_Int = 128;




function STATE_FLDT () {
  if (buf2.length < 8) return true;
  var catchbuf2 = buf2;
  var id = buf2.slice(0, 4).toString('ascii');
  var len = buf2.readInt32LE(4);

  if (len < 0 || len > 0x10000000) {
    console.log(new Error("invalid chunk length: " + len));
    return;
  }

  buf2 = buf2.slice(8);
  if (id === 'FLdt') {
    console.log("Call STATE_EVENT Now");
    STATE_EVENT();
  } else {
    localLen = len;
    STATE_SKIP();
    //STATE_SKIP();
    //parser.state = STATE_SKIP;
    // parser.skipBytesLeft = len;
    // parser.nextState = STATE_FLDT;
  }
};

function STATE_SKIP() {
  var skipBytes = Math.min(buf2.length, localLen);
  buf2 = buf2.slice(skipBytes);
  localLen -= skipBytes;
  if (localLen === 0) {
    STATE_FLDT();
  } else {
    return true;
  }
};


function STATE_EVENT(){
  var eventId = buf2.readUInt8(CUR++); 

  var data=buf2.readUInt8(CUR++);

  console.log("Event ID: ", eventId)
  console.log(data)


  var b=0;
  if (eventId >= FLP_Word && eventId < FLP_Text) {
    b = buf2.readUInt8(CUR++);
    if (b == null) return true;
    data = data | (b << 8);
  }
  if (eventId >= FLP_Int && eventId < FLP_Text) {
    b = buf2.readUInt8(CUR++);
    if (b == null) return true;
    data = data | (b << 16);

    b = buf2.readUInt8(CUR++);

    if (b == null) return true;
    data = data | (b << 24);
  }
}

//STATE_FLDT();

//0x c0
//0x cb

// var text= Buffer.from([0xcb ,0x18, 0x12, 0xa2, 0xf3, 0x76])
// console.log(text.readUInt16LE(0))
//console.log(String.fromCharCode( text.readUInt8(1) ))
//console.log(text.toString('ascii',4,29))

//console.log(text.readUInt16LE(2))

buf3=Buffer.from([0x23, 0x45, 0x12, 0x53])

var intCount = Math.floor(buf3.length / 4);
intList = [];
for (i = 0; i < intCount; i += 1) {
  intList.push(buf3.readInt32LE(i * 4));
}

console.log(intList)
